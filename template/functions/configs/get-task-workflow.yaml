type: Workflow
match:
  callback: exact_match
  input: /get-task
key: get_task_workflow
---
type: Operation

selector:
  workflow:
    - get_task_workflow
  app: whatsapp
  app_action: send_message

# the is_root attribute defines where the workflow should start
is_root: true

next:
  selector:
    - type: operation
      data:
        workflow: get_task_workflow
        next: query_task

payload:
  content:
    type: raw
    data: "What is the task ID you're looking for?"

key: ask_the_user_for_task_id
---
type: Operation

selector:
  workflow:
    - get_task_workflow
  app: serverless_app
  app_action: get_task_handler

next:
  selector:
    - type: operation
      data:
        workflow: get_task_workflow
        next: send_task_to_user

# we will use the on_error attribute
# to handle server errors and let the user
# know what happend.
on_error:
  selector:
    - type: operation
      data:
        workflow: get_task_workflow
        next: send_error_message_to_user

payload:
  id:
    # we will grab the user's response
    # from the global redis state using the operation
    # key as a prefix to the state data
    type: redis
    rkey_type: hash_map
    data: ask_the_user_for_task_id:message_data:message:body

key: query_task
---
type: Operation

selector:
  workflow:
    - get_task_workflow
  app: whatsapp
  app_action: send_message

output:
  operation_type: drop_session

payload:
  # we will use the vars option to customize the response message with
  # the data we got from the handler
  content:
    type: redis
    data: query_task:text

key: send_task_to_user
